@page "/projects"
@using System.Collections.Immutable
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using DotnetProjectManagement.ProjectManagement.Domain.Entities
@using DotnetProjectManagement.ProjectManagement.Web.Clients
@using DotnetProjectManagement.ProjectManagement.Web.Models
@using DotnetProjectManagement.WebFrontend.Security
@using Microsoft.AspNetCore.Authorization
@inject ProjectClient ProjectClient
@inject UserClient UserClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@attribute [Authorize]

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

<p>Access and manage projects</p>

@if (user is null)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge"/>
    </div>
}
else
{
    @if (IsUserAdmin())
    {
        <Button Color="ButtonColor.Primary" TooltipTitle="Create new project" @onclick="StartNewProject">
            <Icon Name="IconName.Plus"></Icon>
        </Button>
    }

    <Grid @ref="grid"
          TItem="ProjectRepresentation"
          Class="table table-hover"
          DataProvider="ProjectsDataProvider"
          AllowPaging="true"
          Responsive="true">

        <GridColumn TItem="ProjectRepresentation" HeaderText="Actions">
            <Button Color="ButtonColor.Primary"
                    Disabled="@((!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager)) || context.Archived)"
                    TooltipTitle="Edit"
                    Class="mx-2"
                    @onclick="() => StartEditProject(context)">
                <Icon Name="IconName.Pencil"></Icon>
            </Button>
            @if (context.Archived)
            {
                <Button Color="ButtonColor.Primary"
                        Disabled="@(!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager))"
                        TooltipTitle="Restore"
                        @onclick="() => RestoreProject(context.Id)">
                    <Icon Name="IconName.Reply"></Icon>
                </Button>
            }
            else
            {
                <Button Color="ButtonColor.Warning"
                        Disabled="@(!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager))"
                        TooltipTitle="Archive"
                        @onclick="() => ArchiveProject(context.Id)">
                    <Icon Name="IconName.Archive"></Icon>
                </Button>
            }
        </GridColumn>
        <GridColumn TItem="ProjectRepresentation" HeaderText="Name">@context.DisplayName</GridColumn>
        <GridColumn TItem="ProjectRepresentation" HeaderText="No. Members">@context.Members.Count</GridColumn>
        <GridColumn TItem="ProjectRepresentation" HeaderText="Archived">@(context.Archived ? "Yes" : "No")</GridColumn>
    </Grid>

    <Modal @ref="modal" Title="Save project" Size="ModalSize.Large" UseStaticBackdrop="true">
        <BodyTemplate>
            <EditForm EditContext="@editContext">
                <DataAnnotationsValidator/>
                <div class="form-group row">
                    <label class="col-md-2 col-form-label">Name</label>
                    <div class="col-md-10">
                        <TextInput @bind-Value="@projectModel.DisplayName" Placeholder="Enter name"/>
                        <ValidationMessage For="@(() => projectModel.DisplayName)"/>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <Grid TItem="UserRepresentation"
                              Class="table table-hover"
                              DataProvider="UsersDataProvider"
                              AllowPaging="true"
                              Responsive="true">

                            <GridColumn TItem="UserRepresentation" HeaderText="Name" Context="user">
                                @user.FirstName @user.LastName
                            </GridColumn>

                            <GridColumn TItem="UserRepresentation" HeaderText="Role" Context="user">
                                @{
                                    ProjectMemberRole? modelRole = projectModel.Members.TryGetValue(user.Id, out var value) ? value : null;
                                }
                                <InputSelect Value="modelRole"
                                             ValueExpression="() => modelRole"
                                             ValueChanged="(ProjectMemberRole? selectedRole) => SetProjectRole(user.Id, selectedRole)"
                                             class="form-select">
                                    <option value=""></option>
                                    <option value="@ProjectMemberRole.Guest">Guest</option>
                                    <option value="@ProjectMemberRole.Worker">Worker</option>
                                    <option value="@ProjectMemberRole.Manager">Manager</option>
                                </InputSelect>
                            </GridColumn>

                        </Grid>
                    </div>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="modal.HideAsync">Cancel</Button>
            <Button Color="ButtonColor.Primary" @onclick="SaveProject">Save changes</Button>
        </FooterTemplate>
    </Modal>
}

@code {

    private readonly CancellationTokenSource cancellationTokenSource = new();
    private ClaimsPrincipal? user;
    private Grid<ProjectRepresentation> grid = null!;
    private Modal modal = null!;
    private EditContext editContext = null!;
    private readonly ProjectModel projectModel = new();
    private Guid? saveProjectId;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(projectModel);

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authenticationState.User;
    }

    private bool IsUserAdmin() => user?.IsAdmin() ?? false;

    private bool IsProjectRole(ProjectRepresentation projectRepresentation, ProjectMemberRole role)
    {
        if (user?.Id() is { } id)
        {
            return projectRepresentation.Members[id] == role;
        }

        return false;
    }

    private async Task ArchiveProject(Guid projectId)
    {
        await ProjectClient.ArchiveProjectAsync(projectId, cancellationTokenSource.Token);
        await grid.RefreshDataAsync(cancellationTokenSource.Token);
    }

    private async Task RestoreProject(Guid projectId)
    {
        await ProjectClient.RestoreProjectAsync(projectId, cancellationTokenSource.Token);
        await grid.RefreshDataAsync(cancellationTokenSource.Token);
    }

    private async Task<GridDataProviderResult<ProjectRepresentation>> ProjectsDataProvider(
        GridDataProviderRequest<ProjectRepresentation> request)
    {
        var page = await ProjectClient
            .ListProjectsAsync(request.PageNumber - 1, request.PageSize, request.CancellationToken);

        return new GridDataProviderResult<ProjectRepresentation>
        {
            Data = page.Content,
            TotalCount = (int)page.TotalElements
        };
    }

    private async Task<GridDataProviderResult<UserRepresentation>> UsersDataProvider(
        GridDataProviderRequest<UserRepresentation> request)
    {
        var page = await UserClient
            .ListUsersAsync(request.PageNumber - 1, request.PageSize, request.CancellationToken);

        return new GridDataProviderResult<UserRepresentation>
        {
            Data = page.Content,
            TotalCount = (int)page.TotalElements
        };
    }

    private async Task StartNewProject()
    {
        saveProjectId = null;
        projectModel.DisplayName = "";
        projectModel.Members = [];
        await modal.ShowAsync();
    }

    private async Task StartEditProject(ProjectRepresentation project)
    {
        saveProjectId = project.Id;
        projectModel.DisplayName = project.DisplayName;
        projectModel.Members = project.Members.ToDictionary();
        await modal.ShowAsync();
    }

    private void SetProjectRole(Guid userId, ProjectMemberRole? value)
    {
        if (value is { } role)
        {
            projectModel.Members[userId] = role;
        }
        else
        {
            projectModel.Members.Remove(userId);
        }
    }

    private async Task SaveProject()
    {
        if (editContext.Validate())
        {
            var request = new ProjectSaveRequest
            {
                DisplayName = projectModel.DisplayName,
                Members = projectModel.Members.ToImmutableDictionary()
            };

            if (saveProjectId is { } projectId)
            {
                await ProjectClient.UpdateProjectAsync(projectId, request, cancellationTokenSource.Token);
            }
            else
            {
                await ProjectClient.CreateProjectAsync(request, cancellationTokenSource.Token);
            }

            await modal.HideAsync();
            await grid.RefreshDataAsync(cancellationTokenSource.Token);
        }
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }

    private class ProjectModel
    {
        [Required(AllowEmptyStrings = false, ErrorMessage = "Name required.")]
        [StringLength(255, ErrorMessage = "Maximum 255 characters.")]
        public string DisplayName { get; set; } = "";

        public Dictionary<Guid, ProjectMemberRole> Members { get; set; } = [];
    }

}
