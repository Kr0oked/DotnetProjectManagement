@page "/projects"
@using System.Collections.Immutable
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Security.Claims
@using DotnetProjectManagement.ProjectManagement.Domain
@using DotnetProjectManagement.ProjectManagement.Domain.Actions
@using DotnetProjectManagement.ProjectManagement.Domain.Entities
@using DotnetProjectManagement.ProjectManagement.Web.Clients
@using DotnetProjectManagement.ProjectManagement.Web.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@inherits HubBase
@implements IDisposable
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager
@inject PreloadService PreloadService
@inject ProjectClient ProjectClient
@inject UserClient UserClient

<PageTitle>@Localizer["Projects"]</PageTitle>

<h1>@Localizer["Projects"]</h1>

<p>@Localizer["ProjectsDescription"]</p>

@if (user is null)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge"/>
    </div>
}
else
{
    @if (IsUserAdmin())
    {
        <Button Color="ButtonColor.Primary"
                TooltipTitle="@Localizer["ProjectsCreateTooltip"]"
                @onclick="StartNewProject">
            <Icon Name="IconName.Plus"></Icon>
        </Button>
    }

    <Grid @ref="grid"
          TItem="ProjectRepresentation"
          Class="table table-hover"
          DataProvider="ProjectsDataProvider"
          AllowPaging="true"
          Responsive="true"
          PaginationItemsTextFormat="@Localizer["GridPaginationItemsTextFormat"]">

        <GridColumn TItem="ProjectRepresentation" HeaderText="@Localizer["Actions"]">
            <Button Color="ButtonColor.Primary"
                    TooltipTitle="@Localizer["ActionNavigateToTasks"]"
                    Class="mx-1"
                    @onclick="() => NavigateToTasks(context.Id)">
                <Icon Name="IconName.ListTask"></Icon>
            </Button>
            <Button Color="ButtonColor.Primary"
                    Disabled="@((!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager)) || context.Archived)"
                    TooltipTitle="@Localizer["ActionEdit"]"
                    Class="mx-1"
                    @onclick="() => StartEditProject(context)">
                <Icon Name="IconName.Pencil"></Icon>
            </Button>
            @if (context.Archived)
            {
                <Button Color="ButtonColor.Primary"
                        Disabled="@(!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager))"
                        TooltipTitle="@Localizer["ActionRestore"]"
                        Class="mx-1"
                        @onclick="() => RestoreProject(context.Id)">
                    <Icon Name="IconName.Reply"></Icon>
                </Button>
            }
            else
            {
                <Button Color="ButtonColor.Warning"
                        Disabled="@(!IsUserAdmin() && !IsProjectRole(context, ProjectMemberRole.Manager))"
                        TooltipTitle="@Localizer["ActionArchive"]"
                        Class="mx-1"
                        @onclick="() => ArchiveProject(context.Id)">
                    <Icon Name="IconName.Archive"></Icon>
                </Button>
            }
            <Button Color="ButtonColor.Primary"
                    TooltipTitle="@Localizer["ActionShowHistory"]"
                    Class="mx-1"
                    @onclick="() => ShowHistory(context.Id)">
                <Icon Name="IconName.ClockHistory"></Icon>
            </Button>
        </GridColumn>

        <GridColumn TItem="ProjectRepresentation" HeaderText="@Localizer["ProjectName"]">
            @context.DisplayName
        </GridColumn>

        <GridColumn TItem="ProjectRepresentation" HeaderText="@Localizer["ProjectMembersCount"]">
            @context.Members.Count
        </GridColumn>

        <GridColumn TItem="ProjectRepresentation" HeaderText="@Localizer["ProjectArchived"]">
            @(context.Archived ? Localizer["StateYes"] : Localizer["StateNo"])
        </GridColumn>

    </Grid>

    <Modal @ref="saveModal"
           Title="@Localizer["ProjectSaveTitle"]"
           Size="ModalSize.Large"
           UseStaticBackdrop="true">
        <BodyTemplate>
            <EditForm EditContext="@editContext">
                <DataAnnotationsValidator/>
                <div class="form-group row">
                    <label class="col-md-2 col-form-label">@Localizer["ProjectName"]</label>
                    <div class="col-md-10">
                        <TextInput @bind-Value="@projectModel.DisplayName"
                                   Placeholder="@Localizer["ProjectNamePlaceholder"]"/>
                        <ValidationMessage For="@(() => projectModel.DisplayName)"/>
                    </div>
                </div>
                <div class="row mb-3 mt-1">
                    <div class="col-md-12">
                        <Grid TItem="UserRepresentation"
                              Class="table table-hover"
                              DataProvider="UsersDataProvider"
                              AllowPaging="true"
                              Responsive="true">

                            <GridColumn TItem="UserRepresentation"
                                        HeaderText="@Localizer["User"]"
                                        Context="item">
                                @item.FirstName @item.LastName
                            </GridColumn>

                            <GridColumn TItem="UserRepresentation"
                                        HeaderText="@Localizer["ProjectMemberRole"]"
                                        Context="item">
                                @{
                                    ProjectMemberRole? modelRole = projectModel
                                        .Members.TryGetValue(item.Id, out var value)
                                        ? value
                                        : null;
                                }
                                <InputSelect Value="modelRole"
                                             ValueExpression="() => modelRole"
                                             ValueChanged="(ProjectMemberRole? selectedRole) => SetProjectRole(item.Id, selectedRole)"
                                             class="form-select">
                                    <option value=""></option>
                                    <option value="@ProjectMemberRole.Guest">
                                        @Localizer["ProjectMemberRoleGuest"]
                                    </option>
                                    <option value="@ProjectMemberRole.Worker">
                                        @Localizer["ProjectMemberRoleWorker"]
                                    </option>
                                    <option value="@ProjectMemberRole.Manager">
                                        @Localizer["ProjectMemberRoleManager"]
                                    </option>
                                </InputSelect>
                            </GridColumn>

                        </Grid>
                    </div>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="saveModal.HideAsync">@Localizer["ActionCancel"]</Button>
            <Button Color="ButtonColor.Primary" @onclick="SaveProject">@Localizer["ActionSave"]</Button>
        </FooterTemplate>
    </Modal>

    <Modal @ref="historyModal"
           Title="@Localizer["ProjectHistoryTitle"]"
           Size="ModalSize.Large"
           UseStaticBackdrop="true">
        <BodyTemplate>
            <Grid TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                  Class="table table-hover"
                  Data="history"
                  Responsive="true">

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["Timestamp"]">
                    @context.Timestamp.ToLocalTime().ToString(CultureInfo.CurrentCulture)
                </GridColumn>

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["User"]">
                    @context.User.FirstName @context.User.LastName
                </GridColumn>

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["Action"]">
                    @context.Action.ToString()
                </GridColumn>

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["ProjectName"]">
                    @context.Entity.DisplayName
                </GridColumn>

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["ProjectMembersCount"]">
                    @context.Entity.Members.Count
                </GridColumn>

                <GridColumn TItem="HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>"
                            HeaderText="@Localizer["ProjectArchived"]">
                    @(context.Entity.Archived ? Localizer["StateYes"] : Localizer["StateNo"])
                </GridColumn>

            </Grid>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="historyModal.HideAsync">@Localizer["ActionCancel"]</Button>
        </FooterTemplate>
    </Modal>
}

@code {

    private readonly CancellationTokenSource cancellationTokenSource = new();
    private ClaimsPrincipal? user;
    private Grid<ProjectRepresentation> grid = null!;
    private Modal saveModal = null!;
    private Modal historyModal = null!;
    private List<HistoryEntryRepresentation<ProjectAction, ProjectRepresentation>> history = [];
    private EditContext editContext = null!;
    private readonly ProjectModel projectModel = new();
    private Guid? saveProjectId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();

            await base.OnInitializedAsync();

            editContext = new EditContext(projectModel);

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authenticationState.User;
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private bool IsUserAdmin() => user?.IsAdmin() ?? false;

    private bool IsProjectRole(ProjectRepresentation projectRepresentation, ProjectMemberRole role)
    {
        if (user?.Id() is { } userId)
        {
            return projectRepresentation.Members[userId] == role;
        }

        return false;
    }

    private async Task<GridDataProviderResult<ProjectRepresentation>> ProjectsDataProvider(
        GridDataProviderRequest<ProjectRepresentation> request)
    {
        try
        {
            PreloadService.Show();

            var page = await ProjectClient
                .ListProjectsAsync(request.PageNumber - 1, request.PageSize, request.CancellationToken);

            return new GridDataProviderResult<ProjectRepresentation>
            {
                Data = page.Content,
                TotalCount = (int)page.TotalElements
            };
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task<GridDataProviderResult<UserRepresentation>> UsersDataProvider(
        GridDataProviderRequest<UserRepresentation> request)
    {
        try
        {
            PreloadService.Show();

            var page = await UserClient
                .ListUsersAsync(request.PageNumber - 1, request.PageSize, request.CancellationToken);

            return new GridDataProviderResult<UserRepresentation>
            {
                Data = page.Content,
                TotalCount = (int)page.TotalElements
            };
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void NavigateToTasks(Guid projectId) => NavigationManager.NavigateTo($"/projects/{projectId}/tasks");

    private async Task ArchiveProject(Guid projectId)
    {
        try
        {
            PreloadService.Show();

            await ProjectClient.ArchiveProjectAsync(projectId, cancellationTokenSource.Token);
            await grid.RefreshDataAsync(cancellationTokenSource.Token);
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task RestoreProject(Guid projectId)
    {
        try
        {
            PreloadService.Show();

            await ProjectClient.RestoreProjectAsync(projectId, cancellationTokenSource.Token);
            await grid.RefreshDataAsync(cancellationTokenSource.Token);
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task StartNewProject()
    {
        try
        {
            PreloadService.Show();

            saveProjectId = null;
            projectModel.DisplayName = "";
            projectModel.Members = [];
            await saveModal.ShowAsync();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task StartEditProject(ProjectRepresentation project)
    {
        try
        {
            PreloadService.Show();

            saveProjectId = project.Id;
            projectModel.DisplayName = project.DisplayName;
            projectModel.Members = project.Members.ToDictionary();
            await saveModal.ShowAsync();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void SetProjectRole(Guid userId, ProjectMemberRole? value)
    {
        if (value is { } role)
        {
            projectModel.Members[userId] = role;
        }
        else
        {
            projectModel.Members.Remove(userId);
        }
    }

    private async Task SaveProject()
    {
        try
        {
            PreloadService.Show();

            if (editContext.Validate())
            {
                var request = new ProjectSaveRequest
                {
                    DisplayName = projectModel.DisplayName,
                    Members = projectModel.Members.ToImmutableDictionary()
                };

                if (saveProjectId is { } projectId)
                {
                    await ProjectClient.UpdateProjectAsync(projectId, request, cancellationTokenSource.Token);
                }
                else
                {
                    await ProjectClient.CreateProjectAsync(request, cancellationTokenSource.Token);
                }

                await saveModal.HideAsync();
                await grid.RefreshDataAsync(cancellationTokenSource.Token);
            }
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task ShowHistory(Guid projectId)
    {
        try
        {
            PreloadService.Show();

            history = await ProjectClient.GetProjectHistoryAsync(projectId, cancellationTokenSource.Token);
            await historyModal.ShowAsync();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    public new void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
        base.Dispose();
    }

    private class ProjectModel
    {
        [Required(
            AllowEmptyStrings = false,
            ErrorMessageResourceType = typeof(Resources),
            ErrorMessageResourceName = "FieldErrorRequired")]
        [StringLength(
            Constants.Text.DisplayNameMaxLength,
            ErrorMessageResourceType = typeof(Resources),
            ErrorMessageResourceName = "DisplayNameErrorStringLength")]
        public string DisplayName { get; set; } = "";

        public Dictionary<Guid, ProjectMemberRole> Members { get; set; } = [];
    }

}
