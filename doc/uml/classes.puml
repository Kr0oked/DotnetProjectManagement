@startuml
left to right direction

class Project {
    + Id: string <<get>>
    + DisplayName: string <<get>>
    + Members: IReadOnlyDictionary<User, ProjectMemberRole> <<get>>
    + Archived: bool <<get>>
    + Milestones: IReadOnlySet<Milestone> <<get>>
    + Tasks: IReadOnlySet<Task> <<get>>
    + History: IReadOnlyList<ProjectActivity> <<get>>

    + UpdateDisplayName(user: User, displayName: string) : void
    + UpdateMembers(user: User, IReadOnlyDictionary<User, ProjectMemberRole>) : void
    + Archive(user: User) : void
    + Restore(user: User) : void
}

enum ProjectMemberRole {
    Guest,
    Worker,
    Manager
}

class Milestone {
    + Id: string <<get>>
    + DisplayName: string <<get>>
    + StartDate: DateOnly? <<get>>
    + DueDate: DateOnly? <<get>>
    + Deleted: bool <<get>>
    + Project: Project <<get>>
    + Tasks: IReadOnlySet<Task> <<get>>
    + History: IReadOnlyList<MilestoneActivity> <<get>>

    + UpdateDisplayName(user: User, displayName: string) : void
    + UpdateDates(user: User, startDate: DateOnly?, dueDate: DateOnly?) : void
    + Delete(user: User) : void
}

class Task {
    + Id: string <<get>>
    + DisplayName: string <<get>>
    + Description: string <<get>>
    + Assignees: IReadOnlySet<User> <<get>>
    + Milestone: Milestone? <<get>>
    + Attachments: IReadOnlySet<<Document> <<get>>
    + Open: string <<get>>
    + Project: Project <<get>>
    + History: IReadOnlyList<TaskActivity> <<get>>

    + UpdateDisplayName(user: User, displayName: string) : void
    + UpdateDescription(user: User, description: string) : void
    + UpdateAssignees(user: User, assignees: IEnumerable<User>) : void
    + UpdateMilestone(user: User, milestone: Milestone?) : void
    + UpdateAttachments(user: User, attachments: IEnumerable<Document>) : void
    + Close(user: User) : void
    + Reopen(user: User) : void
}

abstract class Activity {
    + Id: string <<get>>
    + User: user <<get>>
    + Timestamp: DateTimeOffset <<get>>
}

abstract class ProjectActivity extends Activity {
    + Project: Project <<get>>
}

class ProjectCreatedActivity extends ProjectActivity {
    + DisplayName: string <<get>>
    + Members: IReadOnlyDictionary<User, ProjectMemberRole>
}

class ProjectDisplayNameUpdatedActivity extends ProjectActivity {
    + NewDisplayName: string <<get>>
    + PreviousDisplayName: string <<get>>
}

class ProjectMembersUpdatedActivity extends ProjectActivity {
    + NewMembers: IReadOnlyDictionary<User, ProjectMemberRole>
    + PreviousMembers: IReadOnlyDictionary<User, ProjectMemberRole>
}

class ProjectArchivedActivity extends ProjectActivity {
}

class ProjectRestoredActivity extends ProjectActivity {
}

abstract class MilestoneActivity extends Activity {
    + Milestone: Milestone <<get>>
}

class MilestoneCreatedActivity extends MilestoneActivity {
    + DisplayName: string <<get>>
    + StartDate: DateOnly? <<get>>
    + DueDate: DateOnly? <<get>>
}

class MilestoneDisplayNameUpdatedActivity extends MilestoneActivity {
    + NewDisplayName: string <<get>>
    + PreviousDisplayName: string <<get>>
}

class MilestoneDatesUpdatedActivity extends MilestoneActivity {
    + NewStartDate: DateOnly? <<get>>
    + NewDueDate: DateOnly? <<get>>
    + PreviousStartDate: DateOnly? <<get>>
    + PreviousDueDate: DateOnly? <<get>>
}

class MilestoneDeletedActivity extends MilestoneActivity {
}

abstract class TaskActivity extends Activity {
    + Task: Task <<get>>
}

class TaskCreatedActivity extends TaskActivity {
    + DisplayName: string <<get>>
    + Description: string <<get>>
    + Open: string <<get>>
    + Assignees: IReadOnlySet<User> <<get>>
}

class TaskDisplayNameUpdatedActivity extends TaskActivity {
    + NewDisplayName: string <<get>>
    + PreviousDisplayName: string <<get>>
}

class TaskDescriptionUpdatedActivity extends TaskActivity {
    + NewDescription : string <<get>>
    + PreviousDescription: string <<get>>
}

class TaskAssigneesUpdatedActivity extends TaskActivity {
    + NewAssignees: IReadOnlySet<User> <<get>>
    + PreviousAssignees: IReadOnlySet<User> <<get>>
}

class TaskMilestoneUpdatedActivity extends TaskActivity {
    + NewMilestone: Milestone? <<get>>
    + PreviousMilestone: Milestone? <<get>>
}

class TaskAttachmentsUpdatedActivity extends TaskActivity {
    + NewAttachments: IReadOnlySet<Document> <<get>>
    + PreviousAttachments: IReadOnlySet<Document> <<get>>
}

class TaskClosedActivity extends TaskActivity {
}

class TaskReopenedActivity extends TaskActivity {
}

class Document {
    + Id: string <<get>>
    + DisplayName: string <<get>>
    + MimeType: string <<get>>
    + CreatedTime: DateTimeOffset <<get>>
    + CreatedBy: User <<get>>
    + Task: Task? <<get>>
    + History: IReadOnlyList<TaskAttachmentsUpdatedActivity> <<get>>
}

class User {
    + Username: string <<get>>
    + IsAdministrator: bool <<get>>
    + ActiveProjects: IReadOnlyDictionary<Projects, ProjectMemberRole> <<get>>
    + ArchivedProjects: IReadOnlyDictionary<Projects, ProjectMemberRole> <<get>>
    + OpenTasks: IReadOnlySet<Task> <<get>>
    + ClosedTasks: IReadOnlySet<Task> <<get>>
    + Documents: IReadOnlySet<Document> <<get>>
    + History: IReadOnlyList<Activity> <<get>>
}

Project "1" *-- "0..*" Milestone
Project "1" *-- "0..*" Task
Project "1" *-- "1..*" ProjectActivity
Project "0..*" o-- "0..*" User
Project o-- ProjectMemberRole

Milestone "0..1" --o "0..*" Task
Milestone "1" *-- "1..*" MilestoneActivity

Task "1" *-- "1..*" TaskActivity
Task "0..*" o-- "0..*" User
Task "0..*" o-- "1" Document

Activity "0..*"  o-- "1" User
ProjectCreatedActivity "0..*" o-- "0..*" User
ProjectMembersUpdatedActivity "0..*" o-- "0..*" User
TaskCreatedActivity "0..*" o-- "0..*" User
TaskAssigneesUpdatedActivity "0..*" o-- "0..*" User
TaskAttachmentsUpdatedActivity "0..*" o-- "0..*" Document

Document "0..*" o-- "1" User

@enduml
